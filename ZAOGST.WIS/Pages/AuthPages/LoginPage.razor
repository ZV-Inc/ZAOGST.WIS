@page "/login"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorageService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IUserService UserService

<h3>Вход</h3>

<div class="custom-body">
	<div class="custom-container">
		<div class="logo">
			<img width="250px" src="img/Logo-GST_Centr.png" />
			<br />
			<br />
		</div>
		<EditForm Model="@user" OnValidSubmit=Authenticate class="custom-form">
			<FluentValidationValidator />
			<div class="user-box">
				<InputText @bind-Value="@user.Username" class="custom-input" />
				<label class="custom-label">Имя пользователя</label>
				<ValidationMessage For="() => user.Username" />
			</div>
			<div class="user-box">
				<InputText @bind-Value="@user.Password" type="password" class="custom-input" />
				<label class="custom-label">Пароль</label>
				<ValidationMessage For="() => user.Password" />
			</div>
			<div class="user-box">
				<InputText @bind-Value="@_passwordConfirmation" type="password" class="custom-input" />
				<label class="custom-label">Подтвердите пароль</label>
				<ValidationMessage For="() => user.Password" />
			</div>
			<span class="custom-span">
				<button type="submit">Войти</button>
			</span>
		</EditForm>
		<div class="social">
			<div class="icons">
				<a href="https://zaogst.ru/" target="_blank" rel="noopener noreferrer" class="fa-solid fa-fire-extinguisher" title="Сайт АО НПЦ ГСТ"></a>
				<a href="https://github.com/ZV-Inc/ZAOGST.WIS" target="_blank" rel="noopener noreferrer" class="fa-brands fa-github" title="Исходный код"></a>
			</div>
		</div>
	</div>
</div>

@* <EditForm Model="@user" OnValidSubmit="HandleSubmit">
	<div class="txt_field">
		<InputText @bind-Value="user.Username" class="input-text"></InputText>
		<span></span>
		<label for="username">Имя</label>
	</div>

	<div class="txt_field">
		<InputText id="password" type="password" @bind-Value="user.Password" class="input-text"></InputText>
		<span></span>
		<label for="password">Пароль</label>
	</div>
	<br />
	<button type="submit" class="m-1 btn btn-primary">Войти</button>
</EditForm> *@

@code {
	UserLoginDto user = new();
	private string _passwordConfirmation = string.Empty;

	private async Task Authenticate()
	{
		User? userEntity = await UserService.GetByUsername(user.Username);

		if(userEntity == null || userEntity.Password != user.Password)
		{
			await JsRuntime.InvokeVoidAsync("alert", "Неверное имя пользователя или пароль.");
			return;
		}

		if (user.Password != _passwordConfirmation)
		{
			await JsRuntime.InvokeVoidAsync("alert", "Пароли не совпадают.");
			return;
		}

		var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(new UserSession
		{
			Username = userEntity.Username,
			Role = userEntity.Role
		});

		NavigationManager.NavigateTo("/", true);
	}

	// private async Task HandleSubmit()
	// {
	// 	string baseUrl = "https://localhost:5200/";
	// 	HttpResponseMessage result = await Http.PostAsJsonAsync($"{baseUrl}api/auth", user);
	// 	string token = await result.Content.ReadAsStringAsync();
	// 	await JsRuntime.InvokeAsync<string>("console.log", token);
	// 	await LocalStorageService.SetItemAsStringAsync("token", token);
	// 	await AuthStateProvider.GetAuthenticationStateAsync();
	// 	NavigationManager.NavigateTo("/shipmentsview");
	// }
}
