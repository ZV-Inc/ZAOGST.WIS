@page "/login"
@inject IJSRuntime JsRuntime
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Вход</PageTitle>

<AuthorizeView>
    <Authorized>
        @RedirectToSipmentsView()
    </Authorized>
</AuthorizeView>

<div class="custom-body">
    <div class="custom-container">
        <div class="logo">
            <img width="250" src="img/Logo-GST_Centr.png" />
            <br />
            <br />
        </div>
        <EditForm Model="@_user" OnValidSubmit="() => HandleSubmit()" class="custom-form">
            <FluentValidationValidator />
            <div class="user-box">
                <InputText @bind-Value="@_user.Username" class="custom-input" />
                <label class="custom-label">Имя пользователя</label>
                <ValidationMessage For="() => _user.Username" />
            </div>
            <div class="user-box">
                <InputText @bind-Value="@_user.Password" type="password" class="custom-input" />
                <label class="custom-label">Пароль</label>
                <ValidationMessage For="() => _user.Password" />
            </div>
            <span class="custom-span">
                <button type="submit">Войти</button>
            </span>
        </EditForm>
        <div class="social">
            <div class="icons">
                <div class="social-icon" style="background-color: red"><a href="https://zaogst.ru/" target="_blank" rel="noopener noreferrer" class="fa-solid fa-fire-extinguisher" title="Сайт АО НПЦ ГСТ"></a></div>
                <a href="https://t.me/Zeerck" target="_blank" rel="noopener noreferrer" class="fa-brands fa-telegram" style="color: #0088CC; width: 50px; height: 50px; font-size: 50px;" title="Связь с разработчиком"></a>
            </div>
        </div>
    </div>
</div>

@code {
    private UserLoginDto _user = new();

    private string? RedirectToSipmentsView()
    {
        NavigationManager.NavigateTo("/documents/uploads", true);
        return string.Empty;
    }

    private async Task HandleSubmit()
    {
        User? userEntity = await UserService.GetByUsername(_user.Username);

        if (userEntity == null || !BCrypt.Net.BCrypt.Verify(_user.Password, userEntity.Password))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Неверное имя пользователя или пароль.");
            return;
        }

        CustomAuthenticationStateProvider? customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                Username = userEntity.Username,
                Role = userEntity.Role
            });

        RedirectToSipmentsView();
    }
}
