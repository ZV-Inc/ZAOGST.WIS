@page "/balloncreate"
@attribute [Authorize]
@inject IBallonService BallonService
@inject NavigationManager NavigationManager

<PageTitle>Новый баллон</PageTitle>

<h4>Добавить новый баллон</h4>

<EditForm Model="@_ballon" OnValidSubmit="HandleSubmit">
	<FluentValidationValidator />
	<div class="form-group my-adaptive-div">
		<label class="form-label">Тензодатчик</label>
		<InputNumber @bind-Value="_ballon.StrainGaugeNumber" class="form-control" placeholder="Тензодатчик"></InputNumber>
		<ValidationMessage For="() => _ballon.StrainGaugeNumber" />
	</div>

	<div class="form-group my-adaptive-div">
		<label for="BallonNumber">Номер баллона</label>
		<InputSelect class="form-select form-control form-control-sm" @bind-Value="_ballon.BallonNumber">
			@foreach (var number in _ballonNumbers)
			{
				<option value="@number">@number</option>
			}
		</InputSelect>
		<ValidationMessage For="() => _ballon.BallonNumber" />
	</div>
	<br />
	<br />
	<button type="submit" class="btn btn-success">Добавить</button>
	<button @onclick=ToPreviousPage type="button" class="btn btn-secondary">Назад</button>
</EditForm>

@code {
	private Ballon _ballon = new();
	private List<string> _ballonNumbers = BallonNumbers.NumbersList.ToList();

	private async Task HandleSubmit()
	{
		await BallonService.Create(_ballon);
		ToPreviousPage();
	}

	private void ToPreviousPage()
	{
		NavigationManager.NavigateTo("/ballonsview");
	}
}
