@page "/ballonupdate/{id:int}"
@attribute [Authorize]
@inject IBallonService BallonService
@inject IControlBlockService ControlBlockService
@inject IJSRuntime JsRuntime
@inject IShippedControlBlockService ShippedControlBlockService
@inject IShippedBallonService ShippedBallonService
@inject DataContext Context
@inject NavigationManager NavigationManager

<PageTitle>Обновить баллон</PageTitle>

<h3>Обновить данные баллона с тензодатчиком №@_strainGaugeNumber</h3>

<EditForm Model="@_ballon" OnValidSubmit="HandleSubmit">
	<div class="form-group">
		<label for="strainGauge" class="form-label">Тензодатчик</label>
		<InputNumber id="strainGauge" type="strainGauge" @bind-Value="_ballon.StrainGaugeNumber" class="form-control" placeholder="Тензодатчик"></InputNumber>
	</div>

	<div class="form-group">
		<label for="BallonNumber">Номер баллона</label>
		<InputSelect class="form-select form-control form-control-sm" @bind-Value="_ballon.BallonNumber">
			@foreach (var number in _ballonNumbers)
			{
				<option value="@number">@number</option>
			}
		</InputSelect>
	</div>

	<br />
	<br />
	<button type="submit" class="btn btn-success">Обновить</button>
	<button @onclick=DeleteButtonClick type="submit" class="btn btn-danger">Удалить</button>
	<button @onclick=ToPreviousPage type="button" class="btn btn-secondary">Назад</button>
</EditForm>

@code {
	//TODO: Глобально: общие css стили для элементов
	[Parameter]
	public int Id { get; set; }
	private Ballon? _ballon;
	private List<string> _ballonNumbers = BallonNumbers.NumbersList.ToList();
	private int? _strainGaugeNumber = 0;
	private string _ballonNumber = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		_ballon = await BallonService.GetById((int)Id);

		if (_ballon == null) throw new BallonNotFoundException();

		_strainGaugeNumber = _ballon.StrainGaugeNumber;
		_ballonNumber = _ballon.BallonNumber;
	}

	private async void HandleSubmit()
	{
		if (_ballon.StrainGaugeNumber == _strainGaugeNumber && _ballon.BallonNumber == _ballonNumber)
		{
			ToPreviousPage();
		}
		else
		{
			_ballon.DateUpdated = DateTimeConverter.GetNowUTC5();
			await BallonService.Update(_ballon);
			ToPreviousPage();
		}
	}

	private async void DeleteButtonClick()
	{
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Вы уверены что хотите удалить баллон с тензодатчиком №{_strainGaugeNumber}?");

		if (confirmed)
		{
			await BallonService.Delete(_ballon.Id);
			ToPreviousPage();
		}
	}

	private void ToPreviousPage()
	{
		NavigationManager.NavigateTo("/ballonsview");
	}
}