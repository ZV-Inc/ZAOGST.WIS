@page "/ballonsview"
@attribute [Authorize]
@inject IBallonService BallonService
@inject NavigationManager NavigationManager

<PageTitle>Баллоны</PageTitle>

@if (_ballonData == null || _isLoading)
{
	<div class="loading-rectangle"></div>
	<div class="loading-spinner"></div>
	@* WARNING! THIS FUNCTIONAL ONLY FOR DEV BUILD <div><p class="loading-text-center">Добавление баллона @CurrentRandomBallonLoadNumber из @RANDOM_BALLON_COUNT ... Пожалуйста подождите...</p></div> *@
}
else
{
	<h3>Баллоны</h3>
	<br />
	<button @onclick="(() => CreateNewBallon())" class="btn btn-primary" title="Добавить баллон">Добавить баллон</button>

	@* WARNING! THIS FUNCTIONAL ONLY FOR DEV BUILD <div class="d-inline"> | </div>
	<button @onclick=StartCreateRandomBallons class="btn btn-primary" title="Добавить баллон">Добавить случайные баллоны</button> *@

	<br />
	<br />
	<Table T="Ballon" Items="_ballonData" PageSize="15" RowClickAction="RowClick" class="table table-striped table-sm table-bordered">
		<Column TableItem="Ballon" Title="Тензодатчик" Field="@(x => x.StrainGaugeNumber)" Sortable="true" Filterable="true" Width="3%" />
		<Column TableItem="Ballon" Title="Номер" Field="@(x => x.BallonNumber)" Sortable="true" Filterable="true" Width="10%" />
		<Column TableItem="Ballon" Title="Дата добавления" Field="@(x => x.DateAdded)" Sortable="true" Filterable="true" Width="20%" />
		<Pager ShowPageNumber="true" />
	</Table>
}

@code {
	private bool _isLoading { get; set; } = false;
	private List<Ballon>? _ballonData = new();

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(LoadBallonsData); //TODO: Приложение падает если на этом этапе пытаться перезагрузиться или перейти на другую страницу
	}

	private async void LoadBallonsData()
	{
		_ballonData = await BallonService.GetList();
	}

	private void RowClick(Ballon ballon)
	{
		NavigationManager.NavigateTo($"/ballonupdate/{ballon.Id}");
	}

	private void CreateNewBallon()
	{
		NavigationManager.NavigateTo("/balloncreate");
	}

	#region ONLY FOR DEV BUILD
	// private const int RANDOM_BALLON_COUNT = 17;
	// private int _currentRandomBallonLoadNumber = 1;

	// private async void StartCreateRandomBallons()
	// {
	// 	_isLoading = true;
	// 	await Task.Run(CreateNewRandomBallons);
	// }

	// private async void CreateNewRandomBallons()
	// {
	// 	for (int i = 0; i < 17; i++)
	// 	{
	// 		Ballon ballon = new()
	// 			{
	// 				StrainGaugeNumber = _random.Next(1, 999999),
	// 				BallonNumber = BallonNumbers.NumbersList.ToList()[_random.Next(1, 16)]
	// 			};

	// 		_currentRandomBallonLoadNumber = i + 1;
	// 		await InvokeAsync(StateHasChanged);
	// 		await BallonService.Create(ballon);
	// 	}

	// 	NavigationManager.NavigateTo("/ballonsview", true);
	// }
	#endregion
}
