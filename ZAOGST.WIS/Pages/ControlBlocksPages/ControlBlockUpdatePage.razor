@page "/controlblockupdate/{id:int}"
@inject IControlBlockService ControlBlockService
@inject IBallonService BallonService
@inject IShippedControlBlockService ShippedControlBlockService
@inject IShippedBallonService ShippedBallonService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject DataContext Context

<PageTitle>Обновить блок</PageTitle>

<h3>Обновить данные блока управления №@currentControlBlockNumber</h3>

<EditForm Model="@controlBlock" OnValidSubmit="HandleSubmit">
	<div class="form-group my-adaptive-div">
		<label for="build">Номер сборки</label>
		@* <InputSelect class="form-select form-control form-control-sm" @bind-Value="controlBlock.Type"> *@
		<InputSelect class="form-select form-control form-control-sm" @bind-Value="currentControlBlockType">
			@foreach (var type in controlBlockTypes)
			{
				<option value="@type">@type</option>
			}
		</InputSelect>
	</div>
	<div class="form-group my-adaptive-div">
		<label for="date" class="col-sm-2 col-form-label">Дата отгрузки</label>
		<InputDate id="date" @bind-Value="shippingDateTime" class="form-control" />
	</div>
	<br />
	<button type="submit" class="btn btn-success">Обновить</button>
	<button @onclick=BackButtonClick type="button" class="btn btn-secondary">Назад</button>
	@if (controlBlock.Ballons == null)
	{
		<button type="button" style="margin: 5px" class="btn btn-outline-primary" disabled>На отгрузку</button>
	}
	else
	{
		@if (controlBlock.Ballons.Count == 7 && currentControlBlockType == ControlBlockTypes.TYPE200 || (controlBlock.Ballons.Count == 5 && (currentControlBlockType == ControlBlockTypes.TYPE130 || currentControlBlockType == ControlBlockTypes.TYPE90)))
		{
			<button @onclick=SendToShipmentClick type="button" style="margin: 5px" class="btn btn-outline-primary">На отгрузку</button>
		}
		else
		{
			<button type="button" class="btn btn-outline-primary" style="margin: 5px" disabled>На отгрузку</button>
		}
	}
	<br />
	<br />
	<button @onclick="DeleteControlBlock" type="button" class="btn btn-danger">Удалить</button>
	<br />
	<br />
	<div style="width: 50%; height: 1px; border-bottom: 1px solid black; position: absolute;"></div>
	<br />
	@if (controlBlock.Ballons != null && controlBlock.Ballons.Count > 0)
	{
		foreach (var ballon in controlBlock.Ballons)
		{
			<div class="label">Баллон: №@ballon.StrainGaugeNumber</div>
		}
	}
</EditForm>

<button class="btn btn-dark" type="button" @onclick="ToggleBallonsForm">Добавить баллоны</button>
<br />
@if (IsBallonsFormVisible)
{
	<div class="form-group">
		<br />
		<br />
		<label for="ballons">Баллоны</label>
		<Autocomplete SearchMethod="searchBallons" @bind-Value="selectedBallon" EnableDropDown="true" placeholder="Искать баллон по тензодатчику..." @ref="_localAutocomplete">
			<SelectedTemplate Context="ballon">
				@if (!string.IsNullOrEmpty(ballon.BallonNumber))
				{
					@:@ballon.StrainGaugeNumber | @ballon.BallonNumber
					<br />
				}
				else
				{
					@:@ballon.StrainGaugeNumber
					<br />
				}
			</SelectedTemplate>
			<ResultTemplate Context="ballon">
				@if (!string.IsNullOrEmpty(ballon.BallonNumber))
				{
					@:@ballon.StrainGaugeNumber | @ballon.BallonNumber
					<br />
				}
				else
				{
					@:@ballon.StrainGaugeNumber
					<br />
				}
			</ResultTemplate>
		</Autocomplete>
		@if (selectedBallon == null)
		{
			<br />
			<button type="button" class="btn btn-primary" disabled>Добавить</button>
		}
		else
		{
			<br />
			<button type="button" class="btn btn-primary" @onclick="AddToList">Добавить</button>
		}
	</div>

	@if (controlBlock.Ballons != null && controlBlock.Ballons.Count > 0)
	{
		<p>Selected ballon: @selectedBallon.StrainGaugeNumber</p>
	}
}

@code {
	[Parameter]
	public int Id { get; set; }
	ControlBlock controlBlock = new();
	List<string> controlBlockTypes = ControlBlockTypes.GetTypesValueList();
	string currentControlBlockType;
	int currentControlBlockNumber;
	bool IsBallonsFormVisible = false;
	List<Ballon> ballons = new();
	Ballon selectedBallon;
	DateTime shippingDateTime = DateTime.Now;

	// List<Ballon> ballonsFromControlBlock = new();
	private Autocomplete<Ballon, Ballon> _localAutocomplete = default!;

	protected override async Task OnInitializedAsync()
	{
		controlBlock = await ControlBlockService.GetSingleControlBlock((int)Id);
		if (controlBlock == null) throw new Exception("404 — Page not found");

		ballons = await Context.Ballons.AsNoTracking().ToListAsync();
		string[] controlBlockTypeAndNumber = Regex.Split(controlBlock.Type, "/");
		currentControlBlockType = controlBlockTypeAndNumber[0];
		int.TryParse(Regex.Match(controlBlockTypeAndNumber[1], @"(?<=№).*$").Value, out int result);
		currentControlBlockNumber = result;
		shippingDateTime = DateTime.Parse(controlBlock.ShippingDate);
		// foreach (var ballon in controlBlock.Ballons)
		// {
		// 	ballonsFromControlBlock.Add(await BallonService.GetSingleBallonById(ballon.Id));
		// }
	}

	private void ToggleBallonsForm()
	{
		IsBallonsFormVisible = !IsBallonsFormVisible;
		// InvokeAsync(StateHasChanged);
	}

	private void AddToList()
	{
		if (!controlBlock.Ballons.Contains(selectedBallon))
			controlBlock.Ballons.Add(selectedBallon);
	}

	// private async Task AddToList(int number)
	// {
	// 	var ballon = await BallonService.GetSingleBallonByStrainGaugeNumber(number);
	// 	selectedBallons.Add(ballon);
	// 	controlBlock.Ballons = selectedBallons;
	// }

	private async Task<IEnumerable<Ballon>> searchBallons(string searchNumber) //TODO: Сделать адекватный поиск
	{
		return await Task.FromResult(ballons.Where(x => x.StrainGaugeNumber.ToString().Contains(searchNumber) && x.ControlBlock == null && x.ControlBlock == null && x.BallonNumber != BallonNumbers.NONE).ToList());
	}

	protected override async Task OnParametersSetAsync()
	{

	}

	//TODO: Сделать полный функционал редактирования списка баллонов (Сейчас они только добавляются)

	private async Task HandleSubmit()
	{
		if (controlBlock.Ballons == null) return; //TODO: Throw exception

		controlBlock.Type = $"{currentControlBlockType}/№{currentControlBlockNumber}";
		controlBlock.ShippingDate = shippingDateTime.ToShortDateString();
		controlBlock.DateUpdated = DateTime.Now;

		if (controlBlock.Ballons.Count == 0)
		{
			controlBlock.Ballons.Clear();
			await ControlBlockService.UpdateControlBlock(controlBlock);
			NavigationManager.NavigateTo("/controlblocksview");
		}
		else if (currentControlBlockType == ControlBlockTypes.TYPE200 && controlBlock.Ballons.Count == 7)
		{
			await ControlBlockService.UpdateControlBlock(controlBlock);
			NavigationManager.NavigateTo("/controlblocksview");
		}
		else if ((currentControlBlockType == ControlBlockTypes.TYPE130 || currentControlBlockType == ControlBlockTypes.TYPE90) && controlBlock.Ballons.Count == 5)
		{
			await ControlBlockService.UpdateControlBlock(controlBlock);
			NavigationManager.NavigateTo("/controlblocksview");
		}
		else if (currentControlBlockType == ControlBlockTypes.TYPE200 && controlBlock.Ballons.Count != 7)
		{
			bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Внесённые изменения не сохранятся, так как кол-во баллонов меньше или больше 7, вы уверены что хотите выйти?");

			if (confirmed)
			{
				NavigationManager.NavigateTo("/controlblocksview");
			}
		}
		else if ((currentControlBlockType == ControlBlockTypes.TYPE130 || currentControlBlockType == ControlBlockTypes.TYPE90) && controlBlock.Ballons.Count != 5)
		{
			//TODO: Свой класс с подтверждением
			bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Внесённые изменения не сохранятся, так как кол-во баллонов меньше или больше 5, вы уверены что хотите выйти?");

			if (confirmed)
			{
				NavigationManager.NavigateTo("/controlblocksview");
			}
		}
	}

	private async Task DeleteControlBlock()
	{
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Вы уверены что хотите удалить блок №{currentControlBlockNumber}?");

		if (confirmed)
		{
			await ControlBlockService.DeleteControlBlock(controlBlock.Id);
			NavigationManager.NavigateTo("/controlblocksview");
		}
	}

	private void BackButtonClick()
	{
		NavigationManager.NavigateTo("/controlblocksview");
	}

	private async void SendToShipmentClick()
	{
		if (controlBlock.Ballons == null) return;
		if (controlBlock.Type == ControlBlockTypes.TYPE200 && controlBlock.Ballons.Count != 7) return;
		if (((controlBlock.Type == ControlBlockTypes.TYPE130 || controlBlock.Type == ControlBlockTypes.TYPE90) && controlBlock.Ballons.Count != 5)) return;

		//TODO: Отправить на отгрузку
		ShippedControlBlock shippedControlBlock = new()
			{
				Number = controlBlock.Number,
				Type = controlBlock.Type,
				ShippingDate = controlBlock.ShippingDate
			};

		ShippedControlBlock? shippedBlock = await ShippedControlBlockService.CreateShippedControlBlock(shippedControlBlock);

		if (shippedBlock == null) return; //TODO: Handle exception

		// List<ShippedBallon> shippedBallons = new();
		// List<Ballon>? sourceBallons = await ControlBlockService.GetBallonsList(controlBlock.Id);

		// if (sourceBallons == null)
		// 	return;

		// await ShippedControlBlockService.CreateShippedControlBlock(shippedControlBlock);

		// var addedShippedControlBlock = await ShippedControlBlockService.GetSingleShippedControlBlock(await ShippedControlBlockService.GetLastShippedControlBlockId());

		foreach (var ballon in controlBlock.Ballons)
		{
			ShippedBallon shippedBallon = new();
			shippedBallon.StrainGaugeNumber = ballon.StrainGaugeNumber;
			shippedBallon.BallonNumber = ballon.BallonNumber;
			shippedBallon.ShippedControlBlockId = shippedBlock.Id;/* ballon.ControlBlockId; */
			shippedBallon.ShippedControlBlock = shippedBlock;
			// shippedBallons.Add(shippedBallon);
			await ShippedBallonService.CreateShippedBallon(shippedBallon);
		}

		foreach (var ballon in controlBlock.Ballons.ToList())
		{
			if (Context.Ballons.Contains(ballon))
				await BallonService.DeleteBallon(ballon.Id);
		}

		// shippedBlock.ShippedBallons = shippedBallons;
		// await ShippedControlBlockService.UpdateShippedControlBlock(shippedBlock);
		// shippedControlBlock.ShippedBallons = controlBlock.Ballons;

		await ControlBlockService.DeleteControlBlock(controlBlock.Id);
		NavigationManager.NavigateTo("/controlblocksview");
	}
}
