@page "/controlblocksview"
@inject IJSRuntime JsRuntime
@inject IControlBlockService ControlBlockService
@inject NavigationManager NavigationManager

<PageTitle>Блоки управления</PageTitle>

@if (_controlBlockData == null)
{
	<div class="loading-rectangle"></div>
	<div class="loading-spinner"></div>
}
else
{
	<h3>Блоки управления на складе</h3>
	<br />
	<button @onclick=CreateNewControlBlock class="btn btn-primary" title="Добавить блок">Добавить блок</button>
	<div class="d-inline"> | </div>
	<button @onclick=CreateRandomControlBlock class="btn btn-primary" title="Добавить блок">Добавить случайный блок</button>
	<br />
	<br />

	<Table TableItem="ControlBlock" Items="_controlBlockData" PageSize="15" RowClickAction="RowClick" class="table table-striped table-sm table-bordered">
		@* <Column TableItem="ControlBlock" Title="№ Блока управления" Field="@(x => x.Number)" Sortable="true" Filterable="true" Width="3%" /> *@
		<Column TableItem="ControlBlock" Title="Тип" Field="@(x => x.Type)" Sortable="true" Filterable="true" Width="10%" />
		<Column TableItem="ControlBlock" Title="Дата отгрузки" Field="@(x => x.ShippingDate)" Sortable="true" Filterable="true" Width="20%" />
		<Column TableItem="ControlBlock" Title="Дата добавления" Field="@(x => x.DateAdded)" Sortable="true" Filterable="true" Width="20%" />
		<Pager ShowPageNumber="true"></Pager>
	</Table>
}

@code {
	private ControlBlock _controlBlock = new();
	private ControlBlock[] _controlBlockData;
	private ControlBlock _selectedControlBlock;
	private Random _random = new();

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(LoadControlBlocksData);
	}

	private async void LoadControlBlocksData()
	{
		await ControlBlockService.LoadControlBlock();
		_controlBlockData = ControlBlockService.ControlBlocks.OrderBy(x => x.Id).ToArray();
	}

	// private async Task DeleteConfirm(int id)
	// {
	// 	var system = await EmptySystemService.GetSingleEmptySystem(id);
	// 	bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Вы уверены что хотите удалить \"{system.Name}\"?");

	// 	if (confirmed)
	// 	{
	// 		await EmptySystemService.DeleteEmptySystem(id);
	// 		NavigationManager.NavigateTo("controlemptysystems", true);
	// 	}
	// }

	private void RowClick(ControlBlock controlBlock)
	{
		_selectedControlBlock = controlBlock;
		// StateHasChanged();
		ShowControlBlock(_selectedControlBlock.Id);
	}

	private void ShowControlBlock(int id)
	{
		NavigationManager.NavigateTo($"/controlblockupdate/{id}");
	}

	private async void CreateNewControlBlock()
	{
		NavigationManager.NavigateTo("/controlblockcreate");
		// await InvokeAsync(StateHasChanged);
	}

	private async void CreateRandomControlBlock()
	{
		Random random = new();
		int lastControlBlockNumber = await ControlBlockService.GetLastControlBlockCountNumber();

		ControlBlock newControlBlock = new()
			{
				Number = lastControlBlockNumber + 1,
				Type = $"{ControlBlockTypes.GetTypesValueList()[_random.Next(0, 3)]}/№{lastControlBlockNumber + 1}",
				ShippingDate = DateTime.Now.AddDays(random.Next(1, 60)).ToShortDateString(),
			};

		await ControlBlockService.CreateControlBlock(newControlBlock);
		NavigationManager.NavigateTo("/controlblocksview", true);
	}
}
