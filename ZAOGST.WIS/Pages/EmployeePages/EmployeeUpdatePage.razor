@page "/employeeupdate/{id:int}"
@attribute [Authorize(Roles = UserRoles.Admin)]
@inject IJSRuntime JsRuntime
@inject IUserService UserService
@inject DataContext Context
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Обновить данные сотрудника</PageTitle>

@if (_user.Username != "ZV") //Making sence
{
	<h3>Обновить данные сотрудника @_user.Username</h3>

	<EditForm Model="@_user" OnValidSubmit="HandleSubmit">
		<div class="form-group my-adaptive-div">
			<label for="username" class="form-label">Новый логин</label>
			<InputText id="username" @bind-Value="_newUsername" class="form-control" placeholder="Логин сотрудника"></InputText>
		</div>
		<br />
		<div class="form-group my-adaptive-div">
			<label for="password" class="form-label">Новый пароль</label>
			<InputText id="password" @bind-Value="_newPassword" class="form-control" placeholder="Пароль сотрудника"></InputText>
		</div>
		<br />
		<div class="form-group my-adaptive-div">
			<label class="form-label">Роль</label>
			<InputSelect class="form-select form-control form-control-sm" @bind-Value="_newRole">
				@foreach (var role in _userRoles)
				{
					<option value="@role">@role</option>
				}
			</InputSelect>
		</div>

		<br />
		<br />
		<button type="submit" class="btn btn-success">Обновить</button>

		@if (_authState != null && _user.Username == _authState.User.Identity.Name)
		{
			<button disabled class="btn btn-danger">Удалить</button>
		}
		else
		{
			<button @onclick=DeleteButtonClick type="submit" class="btn btn-danger">Удалить</button>
		}

		<button @onclick=ToPreviousPage type="button" class="btn btn-secondary">Назад</button>
	</EditForm>
}
else
{
	<h1>F U</h1> // Proof me wrong
}

@code {
	[Parameter]
	public int Id { get; set; }
	private string _newUsername = string.Empty;
	private string _newPassword = string.Empty;
	private string _newRole = string.Empty;
	private User? _user;
	private List<string> _userRoles = UserRoles.RolesList.ToList();
	private AuthenticationState? _authState = null;

	protected override async Task OnInitializedAsync()
	{
		_user = await UserService.GetById(Id);
		_authState = await AuthStateProvider.GetAuthenticationStateAsync();
		_newRole = _user.Role;

		if (_user == null) throw new UserNotFoundException();
	}

	private async void HandleSubmit()
	{
		string newHashedPassword = BCrypt.Net.BCrypt.HashPassword(_newPassword);

		if (_user.Username == _newUsername && _user.Password == newHashedPassword && _user.Role == _newRole)
		{
			await JsRuntime.InvokeVoidAsync("alert", "Этои данные уже используются для этого пользователя.");
			return;
		}

		if (!string.IsNullOrEmpty(_newPassword) && _user.Password != newHashedPassword)
		{
			_user.Password = newHashedPassword;
			_user.DateUpdated = DateTimeConverter.GetConvertedGPT5(DateTime.Now);
		}

		if (!string.IsNullOrEmpty(_newUsername) && _user.Username != _newUsername)
		{
			_user.Username = _newUsername;
			_user.DateUpdated = DateTimeConverter.GetConvertedGPT5(DateTime.Now);
		}

		if (_user.Role != _newRole)
		{
			_user.Role = _newRole;
			_user.DateUpdated = DateTimeConverter.GetConvertedGPT5(DateTime.Now);
		}

		await UserService.Update(_user);
		ToPreviousPage();
	}

	private async void DeleteButtonClick()
	{
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Вы уверены что хотите удалить сотрудника {_user.Username} из списка?");

		if (confirmed)
		{
			await UserService.Delete(_user.Id);
			ToPreviousPage();
		}
	}

	private void ToPreviousPage()
	{
		NavigationManager.NavigateTo("/employeesview", true);
	}
}