@page "/employeeupdate/{id:int}"
@inject IUserService UserService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject DataContext Context

<PageTitle>Обновить данные сотрудника</PageTitle>

	<h3>Обновить данные сотрудника @_user.Username</h3>

<EditForm Model="@_user" OnValidSubmit="HandleSubmit">
	<div class="form-group my-adaptive-div">
		<label for="username" class="form-label">Логин</label>
		<InputText id="username" @bind-Value="_user.Username" class="form-control" placeholder="Логин сотрудника"></InputText>
	</div>
	<br />
	<div class="form-group my-adaptive-div">
		<label for="password" class="form-label">Пароль</label>
		<InputText id="password" @bind-Value="_user.Password" class="form-control" placeholder="Пароль сотрудника"></InputText>
	</div>
	<br />
	<div class="form-group my-adaptive-div">
		<label class="form-label">Роль</label>
		<InputSelect class="form-select form-control form-control-sm" @bind-Value="_user.Role">
			@foreach (var role in _userRoles)
			{
				<option value="@role">@role</option>
			}
		</InputSelect>
	</div>

	<br />
	<br />
	<button type="submit" class="btn btn-success">Обновить</button>
	<button @onclick=DeleteButtonClick type="submit" class="btn btn-danger">Удалить</button>
	<button @onclick=BackButtonClick type="button" class="btn btn-secondary">Назад</button>
</EditForm>

@code {
	[Parameter]
	public int Id { get; set; }
	private User _user;
	private List<string> _userRoles = UserRoles.GetList();

	protected override async Task OnInitializedAsync()
	{
		_user = await UserService.GetById(Id);

		if (_user == null) throw new Exception("Не удалось найти баллон."); //TODO: Handle exception
	}

	private async void HandleSubmit()
	{
		User oldUser = await UserService.GetById(Id);

		if (_user.Username == oldUser.Username && _user.Password == oldUser.Password && _user.Role == oldUser.Role)
		{
			NavigationManager.NavigateTo("/employeesview");
		}
		else
		{
			_user.DateUpdated = DateTime.Now;
			await UserService.Update(_user);
			NavigationManager.NavigateTo("/employeesview");
		}
	}

	private void BackButtonClick()
	{
		NavigationManager.NavigateTo("/employeesview");
	}

	private async void DeleteButtonClick()
	{
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Вы уверены что хотите удалить сотрудника {_user.Username} из списка?");

		if (confirmed)
		{
			await UserService.Delete(_user.Id);
			NavigationManager.NavigateTo("/employeesview");
		}
	}
}