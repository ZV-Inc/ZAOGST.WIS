@page "/documents/{*CurrentDirectoryName}"
@inject IDirectoryService DirectoryService
@inject IWebHostEnvironment Environment
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

@if (CurrentDirectoryName == "uploads")
{
    <h3>Документы</h3>
}
else
{
    <h3>Документы/@Regex.Match(CurrentDirectoryName, @"(?<=uploads/).*$").Value</h3>
}

<br />
<MudButton OnClick=DirectoryAdd Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Primary">Добавить папку</MudButton>
<MudButton OnClick="OpenAddFileDialog" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.NoteAdd" Color="Color.Primary">Добавить файл</MudButton>
<br />
<br />
<hr style="color: black" />
<br />
@if (_directoriesAndFiles.Count < 1)
{
    <MudText Typo="Typo.h6">Файлов нет</MudText>
}
else
{
    <MudDataGrid T="Tuple<string, string, ContentType>" Items="@_directoriesAndFiles" RowClick="RowClickEvent"
                 SortMode="SortMode.Multiple" Filterable="true" QuickFilter="_quickFilter">
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Title="Название" Sortable="true" Filterable="true">
                <CellTemplate>
                    <MudIcon Icon="@context.Item.Item1" />
                    <MudLink>@context.Item.Item2</MudLink>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Действия" Sortable="false" Filterable="false">
                <CellTemplate>
                    @switch (context.Item.Item3)
                    {
                        case ContentType.File:
                            <MudButton OnClick="((e) => FileDelete(Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, context.Item.Item2)))" Variant="@Variant.Filled" Color="Color.Error">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                            </MudButton>
                            break;
                        case ContentType.Directory:
                            <MudButton OnClick="((e) => DirectoryDelete(Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, context.Item.Item2)))" Variant="@Variant.Filled" Color="Color.Error">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                            </MudButton>
                            <MudButton OnClick="((e) => DirectoryRename(Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, context.Item.Item2)))" Variant="@Variant.Filled" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" />
                            </MudButton>
                            <MudButton OnClick="((e) => DirectoryDownload(Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, context.Item.Item2)))" Variant="@Variant.Filled" Color="Color.Info">
                                <MudIcon Icon="@Icons.Material.Filled.DownloadForOffline" />
                            </MudButton>
                            break;
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}

<MudDialog @bind-IsVisible="_isAddFileDialogOpened" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.FileUpload" Class="mr-3" /> Добавить файл
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".pdf" FilesChanged="UploadFiles" MaximumFileCount="100" Multiple>
            <ButtonTemplate>
                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.UploadFile" for="@context.Id">
                    Выбрать файлы
                </MudButton>
                <br />
                <hr style="color: black" />
                <br />
            </ButtonTemplate>
            <SelectedTemplate>
                @if (context != null)
                {
                    @foreach (var file in context)
                    {
                        <MudText>@file.Name</MudText>
                    }
                }
                else
                {
                    <MudText>Файлы не выбраны</MudText>
                }
            </SelectedTemplate>
        </MudFileUpload>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Style="background-color: lightgray" OnClick="CloseAddFileDialog" Class="px-10">Отмена</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ProcessUploadFiles" Class="px-10">Добавить</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public string CurrentDirectoryName { get; set; }
    private DirectoryInfo _directory { get; set; }
    private string _uploadsDirectoryPath = string.Empty;
    private string _directoryName = string.Empty;
    private string _searchString;
    private const long MAX_FILE_SIZE = long.MaxValue;
    private bool _isAddFileDialogOpened = false;
    private List<string> _indexes = new();
    private List<FileInfo> _files = new();
    private List<IBrowserFile> _filesAwaitToUpload = new();
    private ObservableCollection<Tuple<string, string, ContentType>> _directoriesAndFiles = new();
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override void OnInitialized()
    {
        _uploadsDirectoryPath = Path.Combine(Environment.ContentRootPath);

        UpdateItemsList();
    }

    private void UpdateItemsList()
    {
        _directoriesAndFiles = DirectoryService.GetDirectoriesAndFiles(Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName));

        ObservableCollection<Tuple<string, string, ContentType>> newDirectoriesAndFiles = new();

        foreach (var tuple in _directoriesAndFiles)
        {
            if (tuple.Item3 == ContentType.Directory)
            {
                newDirectoriesAndFiles.Add(new Tuple<string, string, ContentType>(tuple.Item1, tuple.Item2, tuple.Item3)); //TODO: Whole rework, making with DB
            }
            else if (tuple.Item3 == ContentType.File)
            {
                var fileName = tuple.Item2;
                var filePath = Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, fileName);
                var normalFileName = Regex.Match(fileName, @"^.*?(?=_addition-)").Value;

                if (string.IsNullOrEmpty(normalFileName))
                    normalFileName = fileName;

                newDirectoriesAndFiles.Add(new Tuple<string, string, ContentType>(tuple.Item1, normalFileName, tuple.Item3));
            }

            _indexes.Add(tuple.Item2);
        }

        _directoriesAndFiles = newDirectoriesAndFiles;
    }

    private async Task DirectoryAdd()
    {
        IDialogReference dialog = await DialogService.ShowAsync<DirectoryAddDialog>("Delete directory");
        DialogResult result = await dialog.Result;

        if (!result.Canceled)
        {
            string? directoryNameToCreate = result.Data.ToString();

            if (string.IsNullOrEmpty(directoryNameToCreate))
                throw new Exception("CUSTOM EXCEPTION WHILE DELETE DIRECTORY"); //TODO: Custom exception

            string directoryPathToCreate = Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, directoryNameToCreate);
            Directory.CreateDirectory(directoryPathToCreate);

            UpdateItemsList();
        }
    }

    private async Task DirectoryDownload(string directoryPath)
    {
        DirectoryInfo directoryInfo = new(directoryPath);
        DialogParameters<DirectoryDownloadDialog> parameters = new() { { x => x.DirectoryToDownload, directoryInfo } };

        IDialogReference dialog = await DialogService.ShowAsync<DirectoryDownloadDialog>("Download directory", parameters);
        DialogResult result = await dialog.Result;

        if (!result.Canceled)
        {
            DirectoryInfo? directoryToDownload = new(result.Data.ToString());
            string directoryPathToDownload = directoryToDownload.FullName;

            if (string.IsNullOrEmpty(directoryPathToDownload))
                throw new Exception("CUSTOM EXCEPTION WHILE DELETE DIRECTORY"); //TODO: Custom exception

            string zipFilePath = $"{Path.Combine(directoryToDownload.Parent.FullName, directoryInfo.Name)}.zip";
            ZipFile.CreateFromDirectory(directoryPathToDownload, zipFilePath, compressionLevel: CompressionLevel.Optimal, true);

            FileInfo zipFileInfo = new(zipFilePath);

            await DownloadZipDirectory(zipFileInfo);
            File.Delete(zipFilePath);
            Snackbar.Add($"Скачивание папки '{directoryInfo.Name}' завершено", MudBlazor.Severity.Success);
        }
    }

    private async Task DownloadZipDirectory(FileInfo fileInfo)
    {
        string streamPath = fileInfo.FullName;
        FileStream fileStream = File.OpenRead(streamPath);
        string fileName = fileInfo.Name;

        using DotNetStreamReference streamRef = new(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task DirectoryRename(string directoryPath)
    {
        DirectoryInfo directoryInfo = new(directoryPath);
        DialogParameters<DirectoryRenameDialog> parameters = new() { { x => x.DirectoryToRename, directoryInfo } };

        IDialogReference dialog = await DialogService.ShowAsync<DirectoryRenameDialog>("Rename directory", parameters);
        DialogResult result = await dialog.Result;

        if (!result.Canceled)
        {
            string directoryNewName = result.Data.ToString();

            Directory.Move(directoryInfo.FullName, Path.Combine(directoryInfo.Parent.FullName, directoryNewName));

            UpdateItemsList();
        }
    }

    private async Task DirectoryDelete(string directoryPath)
    {
        DirectoryInfo directoryInfo = new(directoryPath);
        DialogParameters<DirectoryDeleteDialog> parameters = new() { { x => x.DirectoryToDelete, directoryInfo } };

        IDialogReference dialog = await DialogService.ShowAsync<DirectoryDeleteDialog>("Delete directory", parameters);
        DialogResult result = await dialog.Result;

        if (!result.Canceled)
        {
            string? directoryToDeletePath = result.Data.ToString();
            bool recursive = true;

            if (string.IsNullOrEmpty(directoryToDeletePath))
                throw new Exception("CUSTOM EXCEPTION WHILE DELETE DIRECTORY"); //TODO: Custom exception

            Directory.Delete(directoryToDeletePath, recursive);

            UpdateItemsList();
        }
    }

    private async Task FileDelete(string filePath)
    {
        FileInfo fileInfo = new(filePath);
        DialogParameters<FileDeleteDialog> parameters = new() { { x => x.FileToDelete, fileInfo } };

        IDialogReference dialog = await DialogService.ShowAsync<FileDeleteDialog>("Delete file", parameters);
        DialogResult result = await dialog.Result;

        string fileName = fileInfo.Name;

        if (!result.Canceled)
        {
            _directoriesAndFiles.Remove(_directoriesAndFiles.FirstOrDefault(x => x.Item2 == fileName));

            List<string> files = Directory.GetFiles(Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName)).ToList();
            List<FileInfo> filesInfo = new();

            foreach (string file in files)
                filesInfo.Add(new FileInfo(file));

            string fileTruePath = filesInfo.FirstOrDefault(x => x.Name.StartsWith(fileName)).FullName; //TODO: Rework this bad unstable thing

            File.Delete(fileTruePath);
        }
    }

    private async void RowClickEvent(DataGridRowClickEventArgs<Tuple<string, string, ContentType>> args)
    {
        switch (args.Item.Item3)
        {
            case ContentType.File:
                await DownloadFileFromStream(args);
                return;
            case ContentType.Directory:
                NavigationManager.NavigateTo($"/documents/{Path.Combine(CurrentDirectoryName, args.Item.Item2)}", true);
                return;
        }
    }

    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
            _filesAwaitToUpload.Add(file);
    }

    private async void ProcessUploadFiles()
    {
        try
        {
            foreach (var file in _filesAwaitToUpload)
            {
                // TODO: Make randomName for files normally with DB?
                Stream fileStream = file.OpenReadStream(MAX_FILE_SIZE);

                string randomAddition = Path.GetRandomFileName();

                string randomFile = Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, $"{file.Name}_addition-{randomAddition}");
                string extention = Path.GetExtension(file.Name);
                string targetFilePath = Path.ChangeExtension(randomFile, extention);

                var targetStream = new FileStream(targetFilePath, FileMode.Create);
                await fileStream.CopyToAsync(targetStream);
                targetStream.Close();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"PROGRAM EXCEPTION CATCH: {ex.Message}");
        }
        finally
        {
            NavigationManager.NavigateTo($"documents/{CurrentDirectoryName}", true);
        }
    }

    private async Task DownloadFileFromStream(DataGridRowClickEventArgs<Tuple<string, string, ContentType>> dict)
    {
        var streamPath = Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName, _indexes[dict.RowIndex]);
        var fileStream = File.OpenRead(streamPath);
        var fileName = dict.Item.Item2;
        var fileExtention = new FileInfo(streamPath).Extension;

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private void OpenAddFileDialog() => _isAddFileDialogOpened = true;
    private void CloseAddFileDialog() => _isAddFileDialogOpened = false;

    private void CreateDirectory(string directoryName)
    {
        try
        {
            var workingDirectory = Path.Combine(_uploadsDirectoryPath, CurrentDirectoryName);
            var pathToDirectory = Path.Combine(workingDirectory, directoryName);
            DirectoryService.Create(pathToDirectory);
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }

        UpdateItemsList();
    }

    private Func<Tuple<string, string, ContentType>, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Item2.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}