@page "/shipmentupdate/{id:int}"
@inject IControlBlockService ControlBlockService
@inject IJSRuntime JsRuntime
@inject IShippedBallonService ShippedBallonService
@inject IShippedControlBlockService ShippedControlBlockService
@inject DataContext Context
@inject NavigationManager NavigationManager

@if (_shippedControlBlock != null)
{
	<PageTitle>Просмотр блока №@_shippedControlBlock.Number</PageTitle>

	<h3>Просмотр блока №@_shippedControlBlock.Number</h3>
	<p class="p-1">Тип: @_shippedControlBlock.Type</p>
	<p class="p-1">Дата отгрузки: @_shippedControlBlock.ShippingDate</p>
	<p class="p-1">Баллоны:</p>
	@foreach (var ballon in _shippedControlBlock.ShippedBallons.OrderBy(x => x.BallonNumber))
	{
		<p class="p-1">№@ballon.StrainGaugeNumber | @ballon.BallonNumber (Дата отгрузки: @ballon.ShippingDate)</p>
	}
	<br />
	<br />
	<AuthorizeView>
		<Authorized>
			<button class="btn btn-primary" @onclick=ReturnToWarehouse>Вернуть на склад</button>
			<button class="btn btn-danger" @onclick="DeleteCurrentShipmentBlock">Удалить</button>
			<button class="btn btn-secondary" @onclick="ToPreviousPage">Назад</button>
		</Authorized>
		<NotAuthorized>
			<button class="btn btn-secondary" @onclick="ToPreviousPage">Назад</button>
		</NotAuthorized>
	</AuthorizeView>
	<br />
}

@code {
	//TODO: Сделать список баллонов через таблицу
	[Parameter]
	public int Id { get; set; }
	private ShippedControlBlock? _shippedControlBlock;

	protected override async Task OnInitializedAsync()
	{
		_shippedControlBlock = await ShippedControlBlockService.GetById(Id);
	}

	private async void DeleteCurrentShipmentBlock()
	{
		if (_shippedControlBlock == null) throw new ShippedControlBlockNotFoundException();
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Вы уверены что хотите удалить баллон с тензодатчиком №{_shippedControlBlock.Number}?");

		if (confirmed)
		{
			await ShippedControlBlockService.Delete(_shippedControlBlock.Id);
			ToPreviousPage();
		}
	}

	private async void ReturnToWarehouse()
	{
		if (_shippedControlBlock == null || _shippedControlBlock.ShippedBallons == null || _shippedControlBlock.ShippedBallons.Count <= 0) throw new Exception("Не удалось найти отгружаемый блок."); //TODO: Обработать исключение

		List<Ballon> ballons = new();

		ControlBlock oldControlBlock = new()
			{
				Number = _shippedControlBlock.Number,
				Type = _shippedControlBlock.Type,
				ShippingDate = _shippedControlBlock.ShippingDate
			};

		ControlBlock? newControlBlock = await ControlBlockService.Create(oldControlBlock);

		if (newControlBlock == null) throw new CannotCreateNewControlBlockException();

		foreach (var shippedBallon in _shippedControlBlock.ShippedBallons)
		{
			Ballon newBallon = new()
				{
					StrainGaugeNumber = shippedBallon.StrainGaugeNumber,
					BallonNumber = shippedBallon.BallonNumber,
					ControlBlockId = newControlBlock.Id,
					ControlBlock = newControlBlock
				};

			ballons.Add(newBallon);
		}

		foreach (ShippedBallon ballon in _shippedControlBlock.ShippedBallons)
		{
			if (Context.ShippedBallons.Contains(ballon))
				await ShippedBallonService.Delete(ballon.Id);
		}

		newControlBlock.Ballons = ballons;

		await ControlBlockService.Update(newControlBlock);

		await ShippedControlBlockService.Delete(_shippedControlBlock.Id);

		ToPreviousPage();
	}

	private void ToPreviousPage()
	{
		NavigationManager.NavigateTo("/shipmentsview");
	}
}
